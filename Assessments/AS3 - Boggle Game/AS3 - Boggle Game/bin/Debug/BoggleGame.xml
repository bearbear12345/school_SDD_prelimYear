<?xml version="1.0"?>
<doc>
<assembly>
<name>
BoggleGame
</name>
</assembly>
<members>
<member name="T:BoggleGame.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:BoggleGame.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:BoggleGame.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:BoggleGame.My.Resources.Resources.boggle_icon">
<summary>
  Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
</summary>
</member>
<member name="P:BoggleGame.My.Resources.Resources.boggle_textmark">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:BoggleGame.My.Resources.Resources.COPYING">
<summary>
  Looks up a localized string similar to DO WHAT THE F*CK YOU WANT TO PUBLIC LICENSE
                    Version 2, December 2004

 Copyright (C) 2004 Sam Hocevar &lt;sam@hocevar.net&gt;

 Everyone is permitted to copy and distribute verbatim or modified
 copies of this license document, and changing it is allowed as long
 as the name is changed.

            DO WHAT THE F*CK YOU WANT TO PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. You just DO WHAT THE F*CK YOU WANT TO..
</summary>
</member>
<member name="P:BoggleGame.My.Resources.Resources.ding">
<summary>
  Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
</summary>
</member>
<member name="P:BoggleGame.My.Resources.Resources.lexicon">
<summary>
  Looks up a localized string similar to aback
abacus
abalone
abandon
abase
abash
abate
abater
abbas
abbe
abbey
abbot
abbreviate
abc
abdicate
abdomen
abdominal
abduct
abed
aberrant
aberrate
abet
abetted
abetting
abeyance
abeyant
abhorred
abhorrent
abide
abject
ablate
ablaze
able
ablution
abnormal
aboard
abode
abolish
abolition
abominable
abominate
aboriginal
aborigine
aborning
abort
abound
about
above
aboveboard
aboveground
abovementioned
abrade
abrasion
abrasive
abreact
abreast
abridge
abridgment
abroad
abrogate
abrupt
abscess
abscissa
abscissae
 [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="P:BoggleGame.My.Resources.Resources.Microsoft_WindowsAPICodePack">
<summary>
  Looks up a localized resource of type System.Byte[].
</summary>
</member>
<member name="P:BoggleGame.My.Resources.Resources.Microsoft_WindowsAPICodePack_Shell">
<summary>
  Looks up a localized resource of type System.Byte[].
</summary>
</member>
<member name="F:BoggleGame.Boggle.GameState">
 <summary>
 Game states to change the function of the interface button
 </summary>
</member>
<member name="M:BoggleGame.Boggle.MenuExitButton">
 <summary>
 Exit game from dropdown menu item
 </summary>
</member>
<member name="M:BoggleGame.Boggle.MenuOptionsButton">
 <summary>
 Open Options window
 </summary>
</member>
<member name="M:BoggleGame.Boggle.MenuHelpButton">
 <summary>
 Open About/Help window
 </summary>
</member>
<member name="M:BoggleGame.Boggle.animation_initialise">
 <summary>
 Add frames into frame list
 </summary>
</member>
<member name="M:BoggleGame.Boggle.animationTick">
 <summary>
 Change animation frame each interval
 Call from timer function
 </summary>
</member>
<member name="M:BoggleGame.Boggle.animation_step">
 <summary>
 Cycle through frames
 </summary>
</member>
<member name="M:BoggleGame.Boggle.animation_painter(System.Collections.Generic.List{System.String})">
 <summary>
 'Paints' the frame onto the grid
 </summary>
 <param name="matrix">List of 16 string elements containing text</param>
</member>
<member name="M:BoggleGame.Boggle.ShowScore">
 <summary>
 Displays a popup of the player's score
 </summary>
</member>
<member name="M:BoggleGame.Boggle.InitialiseGame">
 <summary>
 Reset game
 </summary>
</member>
<member name="M:BoggleGame.Boggle.StartGame">
 <summary>
 Start the game
 </summary>
</member>
<member name="M:BoggleGame.Boggle.StopGame">
 <summary>
 Stop the game
 </summary>
</member>
<member name="M:BoggleGame.Boggle.ButtonEvent">
 <summary>
 Multi-function button effect, that changes function according to the game state
 </summary>
</member>
<member name="M:BoggleGame.Boggle.Shuffle">
 <summary>
 Shake the board!
 </summary>
</member>
<member name="M:BoggleGame.Boggle.UserInput(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 Keyboard listener
 We're intercepting the keypress event BEFORE the new key is shown in the text box
 </summary>
</member>
<member name="M:BoggleGame.Boggle.AppLoad(System.Object,System.EventArgs)">
 <summary>
 Initialise application interface
 </summary>
</member>
<member name="M:BoggleGame.Boggle.AppQuit(System.Object,System.Windows.Forms.FormClosingEventArgs)">
 <summary>
 Intercept application quit event
 </summary>
</member>
<member name="M:BoggleGame.Boggle.SetGameState(System.Int32)">
 <summary>
 Utility function to universally change the game state
 State 1 - waiting for new game
 State 2 - ingame
 State 3 - finished
 </summary>
</member>
<member name="M:BoggleGame.Boggle.CountWord(System.Object)">
 <summary>
 Calculates the word's point value
 </summary>
 <param name="word">word</param>
 <returns>Integer</returns>
</member>
<member name="M:BoggleGame.Boggle.GetGridLocations(System.Char)">
 <summary>
 Finds grid locations of input character
 </summary>
 <param name="ch">Character to find grid locations for</param>
 <returns>List of labels (grid locations)</returns>
</member>
<member name="M:BoggleGame.Boggle.GetSurroundingLocations(System.Windows.Forms.Label)">
 <summary>
 Returns locations surrounding a particular grid location (hard coded)
 </summary>
 <param name="loc">Grid location</param>
 <returns></returns>
</member>
<member name="M:BoggleGame.Boggle.WordLoop(System.Int32,System.Collections.Generic.List{System.Char},System.Windows.Forms.Label,System.Collections.Generic.List{System.Windows.Forms.Label})">
 <summary>
 Self-executing function to validate if a word is on the grid
 The function calls itself for each path it can take - To get the word BEAR, there might be two Es around the B, and only one E might have a surrounding A.
 </summary>
 <param name="i">Current position through word</param>
 <param name="word">List of sequential individual characters of a word</param>
 <param name="previous">Previous grid location</param>
 <param name="exclude">Grid locations to skip</param>
</member>
<member name="M:BoggleGame.Boggle.HandleWord(System.String)">
 <summary>
 Handle word received from word input
 </summary>
 <param name="word">lowercase word</param>
</member>
<member name="M:BoggleGame.Boggle.CalculateMaxScore">
 <summary>
 (Function called by thread)
 Calculate the highest possible score of the given gameboard by trying to validate each word in the lexicon
 </summary>
</member>
<member name="M:BoggleGame.Boggle.shuffleTimerTick">
 <summary>
 Shuffle effect
 Call from timer function
 </summary>
</member>
<member name="M:BoggleGame.Boggle.GameTimerTick">
 <summary>
 Countdown timer
 Call from timer function
 </summary>
</member>
</members>
</doc>
